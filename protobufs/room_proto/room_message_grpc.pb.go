// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: room_message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoomGRPC_Electricity_FullMethodName    = "/room_message.RoomGRPC/Electricity"
	RoomGRPC_Air_FullMethodName            = "/room_message.RoomGRPC/Air"
	RoomGRPC_ClientRegister_FullMethodName = "/room_message.RoomGRPC/ClientRegister"
)

// RoomGRPCClient is the client API for RoomGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomGRPCClient interface {
	Electricity(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Empty, error)
	Air(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Empty, error)
	ClientRegister(ctx context.Context, opts ...grpc.CallOption) (RoomGRPC_ClientRegisterClient, error)
}

type roomGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomGRPCClient(cc grpc.ClientConnInterface) RoomGRPCClient {
	return &roomGRPCClient{cc}
}

func (c *roomGRPCClient) Electricity(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoomGRPC_Electricity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGRPCClient) Air(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoomGRPC_Air_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGRPCClient) ClientRegister(ctx context.Context, opts ...grpc.CallOption) (RoomGRPC_ClientRegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoomGRPC_ServiceDesc.Streams[0], RoomGRPC_ClientRegister_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roomGRPCClientRegisterClient{stream}
	return x, nil
}

type RoomGRPC_ClientRegisterClient interface {
	Send(*Damage) error
	Recv() (*Supply, error)
	grpc.ClientStream
}

type roomGRPCClientRegisterClient struct {
	grpc.ClientStream
}

func (x *roomGRPCClientRegisterClient) Send(m *Damage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roomGRPCClientRegisterClient) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomGRPCServer is the server API for RoomGRPC service.
// All implementations must embed UnimplementedRoomGRPCServer
// for forward compatibility
type RoomGRPCServer interface {
	Electricity(context.Context, *Source) (*Empty, error)
	Air(context.Context, *Source) (*Empty, error)
	ClientRegister(RoomGRPC_ClientRegisterServer) error
	mustEmbedUnimplementedRoomGRPCServer()
}

// UnimplementedRoomGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRoomGRPCServer struct {
}

func (UnimplementedRoomGRPCServer) Electricity(context.Context, *Source) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Electricity not implemented")
}
func (UnimplementedRoomGRPCServer) Air(context.Context, *Source) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Air not implemented")
}
func (UnimplementedRoomGRPCServer) ClientRegister(RoomGRPC_ClientRegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientRegister not implemented")
}
func (UnimplementedRoomGRPCServer) mustEmbedUnimplementedRoomGRPCServer() {}

// UnsafeRoomGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomGRPCServer will
// result in compilation errors.
type UnsafeRoomGRPCServer interface {
	mustEmbedUnimplementedRoomGRPCServer()
}

func RegisterRoomGRPCServer(s grpc.ServiceRegistrar, srv RoomGRPCServer) {
	s.RegisterService(&RoomGRPC_ServiceDesc, srv)
}

func _RoomGRPC_Electricity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGRPCServer).Electricity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGRPC_Electricity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGRPCServer).Electricity(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGRPC_Air_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGRPCServer).Air(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGRPC_Air_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGRPCServer).Air(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGRPC_ClientRegister_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomGRPCServer).ClientRegister(&roomGRPCClientRegisterServer{stream})
}

type RoomGRPC_ClientRegisterServer interface {
	Send(*Supply) error
	Recv() (*Damage, error)
	grpc.ServerStream
}

type roomGRPCClientRegisterServer struct {
	grpc.ServerStream
}

func (x *roomGRPCClientRegisterServer) Send(m *Supply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roomGRPCClientRegisterServer) Recv() (*Damage, error) {
	m := new(Damage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomGRPC_ServiceDesc is the grpc.ServiceDesc for RoomGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "room_message.RoomGRPC",
	HandlerType: (*RoomGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Electricity",
			Handler:    _RoomGRPC_Electricity_Handler,
		},
		{
			MethodName: "Air",
			Handler:    _RoomGRPC_Air_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientRegister",
			Handler:       _RoomGRPC_ClientRegister_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "room_message.proto",
}
