// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: controller_message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ControllerGRPC_Initialize_FullMethodName = "/controller_protobuf.ControllerGRPC/Initialize"
	ControllerGRPC_Subscribe_FullMethodName  = "/controller_protobuf.ControllerGRPC/Subscribe"
)

// ControllerGRPCClient is the client API for ControllerGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerGRPCClient interface {
	Initialize(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Empty, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (ControllerGRPC_SubscribeClient, error)
}

type controllerGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerGRPCClient(cc grpc.ClientConnInterface) ControllerGRPCClient {
	return &controllerGRPCClient{cc}
}

func (c *controllerGRPCClient) Initialize(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ControllerGRPC_Initialize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerGRPCClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (ControllerGRPC_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControllerGRPC_ServiceDesc.Streams[0], ControllerGRPC_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerGRPCSubscribeClient{stream}
	return x, nil
}

type ControllerGRPC_SubscribeClient interface {
	Send(*Supply) error
	Recv() (*Supply, error)
	grpc.ClientStream
}

type controllerGRPCSubscribeClient struct {
	grpc.ClientStream
}

func (x *controllerGRPCSubscribeClient) Send(m *Supply) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerGRPCSubscribeClient) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerGRPCServer is the server API for ControllerGRPC service.
// All implementations must embed UnimplementedControllerGRPCServer
// for forward compatibility
type ControllerGRPCServer interface {
	Initialize(context.Context, *Init) (*Empty, error)
	Subscribe(ControllerGRPC_SubscribeServer) error
	mustEmbedUnimplementedControllerGRPCServer()
}

// UnimplementedControllerGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedControllerGRPCServer struct {
}

func (UnimplementedControllerGRPCServer) Initialize(context.Context, *Init) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedControllerGRPCServer) Subscribe(ControllerGRPC_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedControllerGRPCServer) mustEmbedUnimplementedControllerGRPCServer() {}

// UnsafeControllerGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerGRPCServer will
// result in compilation errors.
type UnsafeControllerGRPCServer interface {
	mustEmbedUnimplementedControllerGRPCServer()
}

func RegisterControllerGRPCServer(s grpc.ServiceRegistrar, srv ControllerGRPCServer) {
	s.RegisterService(&ControllerGRPC_ServiceDesc, srv)
}

func _ControllerGRPC_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Init)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerGRPCServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerGRPC_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerGRPCServer).Initialize(ctx, req.(*Init))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerGRPC_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerGRPCServer).Subscribe(&controllerGRPCSubscribeServer{stream})
}

type ControllerGRPC_SubscribeServer interface {
	Send(*Supply) error
	Recv() (*Supply, error)
	grpc.ServerStream
}

type controllerGRPCSubscribeServer struct {
	grpc.ServerStream
}

func (x *controllerGRPCSubscribeServer) Send(m *Supply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerGRPCSubscribeServer) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerGRPC_ServiceDesc is the grpc.ServiceDesc for ControllerGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller_protobuf.ControllerGRPC",
	HandlerType: (*ControllerGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _ControllerGRPC_Initialize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ControllerGRPC_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "controller_message.proto",
}
